# Generated by Django 3.2.13 on 2022-09-07 03:47

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('health', models.IntegerField()),
                ('attack', models.IntegerField()),
                ('speed', models.IntegerField()),
                ('special', models.CharField(max_length=150)),
                ('image', models.CharField(max_length=150)),
                ('description', models.CharField(max_length=500)),
                ('attack_range', models.IntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='ColorScheme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('scheme', models.JSONField()),
                ('max_player_size', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='GameState',
            fields=[
                ('session', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('state', models.CharField(choices=[('WAITING', 'Waiting for players'), ('READY', 'Ready to play'), ('PLACING', 'Placing pieces'), ('PLAYING', 'Game in progress'), ('FINISHED', 'Game Over')], default='WAITING', max_length=50)),
                ('turn_count', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(default=0)),
                ('number', models.IntegerField()),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='game.gamestate')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Piece',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location_x', models.IntegerField(null=True)),
                ('location_y', models.IntegerField(null=True)),
                ('health', models.IntegerField(default=0)),
                ('range', models.IntegerField(default=0)),
                ('attack', models.IntegerField(default=0)),
                ('character', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='game.character')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='game.gamestate')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='game.player')),
            ],
        ),
        migrations.CreateModel(
            name='Map',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('data', models.JSONField()),
                ('player_size', models.IntegerField()),
                ('num_characters', models.IntegerField()),
                ('color_scheme', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='game.colorscheme')),
            ],
        ),
        migrations.AddField(
            model_name='gamestate',
            name='map',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='game.map'),
        ),
    ]
